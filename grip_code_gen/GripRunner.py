#!/usr/bin/python3

"""
Simple skeleton program for running an OpenCV pipeline generated by GRIP and using NetworkTables to send data.

Users need to:

1. Import the generated GRIP pipeline, which should be generated in the same directory as this file.
2. Set the network table server IP. This is usually the robots address (roborio-TEAM-frc.local) or localhost
3. Handle putting the generated code into NetworkTables
"""

import cv2
from networktables import NetworkTables
from grip import GripPipeline  # TODO change the default module and class, if needed


def extra_processing(pipeline: GripPipeline):
    """
    Performs extra processing on the pipeline's outputs and publishes data to NetworkTables.
    :param pipeline: the pipeline that just processed an image
    :return: None
    """
    # TODO: Users need to implement this.
    # Useful for converting OpenCV objects (e.g. contours) to something NetworkTables can understand.
    
    areas = []
    xCenterCords = []
    yCenterCords = []
    widths = []
    heights = []

    # takes contours from openCV to network table understandable items
    for contour in pipeline.convex_hulls_output:
        x, y, w, h = cv2.boundingRect(contour)
        xCenterCords.append(x + w/2)
        yCenterCords.append(y + w/2)
        widths.append(w)
        heights.append(h)
        areas.append(w*h)

    # Publish data to /vision/yellow_stuff
    table = NetworkTables.getTable('/vision/yellow_stuff')
    table.putNumberArray('x', xCenterCords)
    table.putNumberArray('y', yCenterCords)
    table.putNumberArray('Widths', widths)
    table.putNumberArray('Heights', heights)
    table.putNumberArray('Areas', areas)

def main():
    NetworkTables.initialize("localhost")  # TODO set your team number
    cap = cv2.VideoCapture(0)
    pipeline = GripPipeline()
    while True:
        ret, frame = cap.read()
        if ret:
            pipeline.process(frame)  # TODO add extra parameters if the pipeline takes more than just a single image
            extra_processing(pipeline)


if __name__ == '__main__':
    main()
